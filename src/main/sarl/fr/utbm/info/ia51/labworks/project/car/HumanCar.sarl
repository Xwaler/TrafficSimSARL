package fr.utbm.info.ia51.labworks.project.car

import io.sarl.core.Initialize
import io.sarl.core.Destroy
import io.sarl.core.Logging
import io.sarl.core.Behaviors

import fr.utbm.info.ia51.labworks.project.events.HumanCarPropertiesUpdate
import fr.utbm.info.ia51.labworks.project.events.EnterOneWayRoad
import fr.utbm.info.ia51.labworks.project.events.EnterEntryPoint
import fr.utbm.info.ia51.labworks.project.behaviors.OneWayRoadHumanBehavior
import fr.utbm.info.ia51.labworks.project.behaviors.EntryPointHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.EnterTwoWayRoad
import fr.utbm.info.ia51.labworks.project.behaviors.TwoWayRoadHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.EnterCrossIntersection
import fr.utbm.info.ia51.labworks.project.behaviors.CrossIntersectionHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.EnterIntersectionY
import fr.utbm.info.ia51.labworks.project.behaviors.IntersectionYHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.EnterIntersectionT
import fr.utbm.info.ia51.labworks.project.behaviors.IntersectionTHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.EnterRoundabout
import fr.utbm.info.ia51.labworks.project.behaviors.RoundaboutHumanBehavior
import fr.utbm.info.ia51.labworks.project.events.Intent

agent HumanCar extends Car {
	uses Logging, Behaviors

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		synchronized (this) {
			this.obedienceRate = occurrence.parameters.get(4) as Double
		}
		info("New human car spawned.")
	}

	on HumanCarPropertiesUpdate {
		this.obedienceRate = occurrence.obedienceRate
		info("Properties updated")
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterOneWayRoad {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new OneWayRoadHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterTwoWayRoad {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new TwoWayRoadHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterEntryPoint {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new EntryPointHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterCrossIntersection {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new CrossIntersectionHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterIntersectionY {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new IntersectionYHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterIntersectionT {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new IntersectionTHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterRoundabout {
		if (this.carBehavior !== null) {
			info("Exited road")
			unregisterBehavior(this.carBehavior)
		}
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new RoundaboutHumanBehavior(this))
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Human car destroyed.")
	}
}
