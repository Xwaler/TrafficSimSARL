package fr.utbm.info.ia51.labworks.project.environment

import io.sarl.core.Initialize
import io.sarl.core.AgentSpawned
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.AgentTask
import java.util.UUID
import java.util.ArrayList

import fr.utbm.info.ia51.labworks.project.ui.MainFrame
import fr.utbm.info.ia51.labworks.project.car.AutonomousCar
import fr.utbm.info.ia51.labworks.project.car.HumanCar
import fr.utbm.info.ia51.labworks.project.road.Graph
import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent
import fr.utbm.info.ia51.labworks.project.events.Intent
import fr.utbm.info.ia51.labworks.project.events.PhysicsUpdate
import fr.utbm.info.ia51.labworks.project.events.PerceptionUpdate
import fr.utbm.info.ia51.labworks.project.car.Car
import fr.utbm.info.ia51.labworks.project.events.StopSimulationEvent
import java.util.List
import fr.utbm.info.ia51.labworks.project.road.Road
import fr.utbm.info.ia51.labworks.project.road.Intersection

agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	
	var UI : MainFrame
	var mesureFlux : double
	var tauxAccident : double
	var tempsTrajet : double
	var roads : Graph

	var nbCars : int
	var nbInitializedCars : int = 0
	var cars : ArrayList<UUID> = new ArrayList<UUID>
	var intents : ArrayList<Intent> = new ArrayList<Intent>
	var physicsUpdates : List<PhysicsUpdate> = new ArrayList<PhysicsUpdate>
	
	on Initialize {
		synchronized (this) {
			this.UI = occurrence.parameters.get(0) as MainFrame
			this.roads = new Graph(defaultContext)
			roads.generateRandom()
		}
	}
	
	on StartSimulationEvent {
		info("SIMULATION STARTED")
		synchronized (this) {
			this.nbInitializedCars = 0
			this.nbCars = occurrence.nbCars
			this.addCars(
				occurrence.nbCars,
				occurrence.autonomousProportions,
				occurrence.obedienceRate,
				occurrence.reactionTime,
				occurrence.perceptionErrorRate,
				occurrence.viewDistance,
				occurrence.FOV
			);
		}
	}

	on StopSimulationEvent {
		synchronized (this) {
			this.cars.clear()
			this.intents.clear()
		}
	}
	
	on AgentSpawned {
		synchronized (this) {
			var agentID : UUID = occurrence.agentID
			if (cars.contains(agentID)) {
				this.roads.enter(agentID)
				this.nbInitializedCars++
				if (this.nbInitializedCars == this.nbCars) {
					computePerceptions()
				}
			}
		}
	}
	
	def addCars(
		nbCars : int, 
		autonomousProportions : double, 
		obedienceRate : double,
		reactionTime : double,
		perceptionErrorRate : double,
		viewDistance : double,
		FOV : double
	) : void {
		var nbAutonomous : int = (nbCars * autonomousProportions) as int
		for (i : 0 ..< nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(AutonomousCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV)
		}
		for (i : 0 ..< nbCars - nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(HumanCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV, obedienceRate)
		}
	}

	on Intent {
		synchronized (this) {
			this.intents.add(occurrence);
			if (this.intents.size() == this.nbCars) {
				info("All intents received")
				resolveConflicts()
				task("frame_delay").in(500) [ computePerceptions() ]
			}
		}
	}

	def resolveConflicts() : void {
		// TODO: resolve conflicts
		this.physicsUpdates.clear()
		for (i : 0 ..< this.nbCars) {
			var update : PhysicsUpdate = new PhysicsUpdate()
			var intent : Intent = this.intents.get(i)
			update.newAcceleration = intent.intendedAcceleration
			update.newSpeed = intent.currentSpeed + update.newAcceleration
			update.newPosition = intent.currentPosition + update.newSpeed
			update.newLane = intent.intendedLaneChange
			if (update.newPosition >= 1.0) {
				intent.currentElement.exit(this.cars.get(i))
				if (intent.currentElement instanceof Road) {
					update.newElement = intent.direction == 0 ? 
						(intent.currentElement as Road).getPrimaryNode() : 
						(intent.currentElement as Road).getSecondaryNode()
				} 
				else if (intent.currentElement instanceof Intersection) {
					update.newElement = (intent.currentElement as Intersection).getLinks().get(intent.direction)
				}
				update.newElement = intent.currentElement
				update.newElement.enter(this.cars.get(i))
			}
			this.physicsUpdates.add(update)
		}
		/* Send physics update to cars */
		info("Sending physics updates")
		for (i : 0 ..< this.nbCars) {
			var update : PhysicsUpdate = this.physicsUpdates.get(i)
			emit(update) [ it.UUID == this.cars.get(i) ]
		}
		this.intents.clear()
	}
	
	def computePerceptions() : void {
		info("Sending perception updates")
		for (car : cars) {
			emit(new PerceptionUpdate(
				new ArrayList<Car>()
			)) [it.UUID == car]
		}
	}
}
