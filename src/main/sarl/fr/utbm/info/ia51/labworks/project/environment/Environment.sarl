package fr.utbm.info.ia51.labworks.project.environment

import io.sarl.core.Initialize
import io.sarl.core.AgentSpawned
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import java.util.UUID
import java.util.ArrayList

import fr.utbm.info.ia51.labworks.project.ui.MainFrame
import fr.utbm.info.ia51.labworks.project.car.AutonomousCar
import fr.utbm.info.ia51.labworks.project.car.HumanCar
import fr.utbm.info.ia51.labworks.project.road.Graph
import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent
import fr.utbm.info.ia51.labworks.project.events.Intent
import fr.utbm.info.ia51.labworks.project.events.PhysicsUpdate
import fr.utbm.info.ia51.labworks.project.events.PerceptionUpdate
import fr.utbm.info.ia51.labworks.project.events.StopSimulationEvent
import java.util.List
import fr.utbm.info.ia51.labworks.project.road.Road
import fr.utbm.info.ia51.labworks.project.road.Intersection

import java.util.WeakHashMap
import fr.utbm.info.ia51.labworks.project.road.RoadElement

import java.util.Map
import io.sarl.core.AgentTask
import fr.utbm.info.ia51.labworks.project.events.CarProperties
import fr.utbm.info.ia51.labworks.project.events.GenerateRoadsEvent
import fr.utbm.info.ia51.labworks.project.events.RequestNewObjective
import fr.utbm.info.ia51.labworks.project.events.NewObjective

agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	
	var UI : MainFrame
	var mesureFlux : double
	var tauxAccident : double
	var tempsTrajet : double
	var roads : Graph
	var frameDelayTask : AgentTask

	var nbCars : int
	var cars : List<UUID> = new ArrayList<UUID>
	var intents : Map<UUID, Intent> = new WeakHashMap<UUID, Intent>
	var physicsUpdates : Map<UUID, PhysicsUpdate> = new WeakHashMap<UUID, PhysicsUpdate>
	var carsProperties : Map<UUID, CarProperties> = new WeakHashMap<UUID, CarProperties>
	
	on Initialize {
		synchronized (this) {
			this.roads = new Graph(defaultContext)
			this.roads.generateRandom()
			this.UI = occurrence.parameters.get(0) as MainFrame
			this.UI.passGraph(this.roads)
			this.UI.passCarsProperties(this.carsProperties)
			this.UI.contentPane.repaint()
		}
	}
	
	on StartSimulationEvent {
		info("SIMULATION STARTED")
		synchronized (this) {
			this.frameDelayTask = task("frame_delay")
			this.nbCars = occurrence.nbCars
			this.addCars(
				occurrence.autonomousProportions,
				occurrence.obedienceRate,
				occurrence.reactionTime,
				occurrence.perceptionErrorRate,
				occurrence.viewDistance,
				occurrence.FOV
			);
		}
	}

	on StopSimulationEvent {
		synchronized (this) {
			this.cars.clear()
			this.roads.clearCars()
			this.intents.clear()
			this.physicsUpdates.clear()
			this.carsProperties.clear()
			frameDelayTask.cancel()
		}
	}
	
	on GenerateRoadsEvent {
		synchronized (this) {
			this.roads = new Graph(defaultContext)
			this.roads.generateRandom()
			this.UI.passGraph(this.roads)	
		}
	}
	
	on AgentSpawned {
		synchronized (this) {
			var agentID : UUID = occurrence.agentID
			if (this.cars.contains(agentID)) {
				this.roads.enter(agentID)
			}
		}
	}
	
	synchronized def addCars(
		autonomousProportions : double, 
		obedienceRate : double,
		reactionTime : double,
		perceptionErrorRate : double,
		viewDistance : double,
		FOV : double
	) : void {
		var nbAutonomous : int = (nbCars * autonomousProportions) as int
		for (i : 0 ..< nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(AutonomousCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV)
		}
		for (i : 0 ..< nbCars - nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(HumanCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV, obedienceRate)
		}
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on Intent {
		synchronized (this) {
			if (this.cars.contains(occurrence.source.UUID)) {
				this.intents.put(occurrence.source.UUID, occurrence)
				if (this.intents.size() == this.nbCars) {
					this.resolveConflictsAndComputeNewProperties()
					this.UI.passCarsProperties(this.carsProperties)
					this.UI.repaint()
					frameDelayTask.cancel()
					frameDelayTask.in(1000 / 60) [
						this.updateGraph()
						this.computePerceptions()
					]
				}
			}
		}
	}

	synchronized def resolveConflictsAndComputeNewProperties() : void {
		// TODO: actually resolve conflicts
		this.physicsUpdates.clear()
		for (pair : this.intents.entrySet()) {
			var update : PhysicsUpdate = new PhysicsUpdate()
			var carUUID : UUID = pair.getKey()
			var intent : Intent = pair.getValue()
			update.newAcceleration = intent.intendedAcceleration
			update.newSpeed = intent.currentSpeed + update.newAcceleration
			update.newPosition = intent.currentPosition + (update.newSpeed / intent.currentElement.getLength())
			update.newLane = intent.intendedLaneChange
			if (intent.currentElement instanceof Road) {
				if (update.newPosition >= 1.0) {
					update.newElement = intent.direction == 0 ? 
						(intent.currentElement as Road).getPrimaryNode() : 
						(intent.currentElement as Road).getSecondaryNode()
					update.newPosition = (update.newElement as Intersection).linkThreshold.get(
						(update.newElement as Intersection).links.indexOf(intent.currentElement)
					)
				}
			}
			else if (intent.currentElement instanceof Intersection) {
				var intersectionThreshold : double = (intent.currentElement as Intersection).linkThreshold.get(intent.direction)
				if (intent.currentPosition < intersectionThreshold && update.newPosition >= intersectionThreshold) {
					update.newElement = (intent.currentElement as Intersection).getLinks().get(intent.direction)
					update.newPosition = 0
				} else {
					if (update.newPosition > 1.0) {
						update.newPosition -= 1.0
						if (update.newPosition >= intersectionThreshold) {
							update.newElement = (intent.currentElement as Intersection).getLinks().get(intent.direction)
							update.newPosition = 0
						}
					}
				}
			}
			if (update.newElement === null) {
				update.newElement = intent.currentElement
			}
			this.physicsUpdates.put(carUUID, update)
		}
		this.carsProperties.clear()
		for (car: this.cars) {
			this.carsProperties.put(car, new CarProperties(
				this.intents.get(car),
				this.physicsUpdates.get(car)
			))
		}
		/* Send physics update to cars */
		for (pair : this.physicsUpdates.entrySet()) {
			emit(pair.getValue())[ it.UUID == pair.getKey() ]
		}
	}
	
	synchronized def updateGraph() : void {
		for (pair : this.carsProperties.entrySet()) {
			var carUUID : UUID = pair.getKey()
			var carProperties : CarProperties = pair.getValue()
			if (carProperties.element !== carProperties.futureElement) {
				carProperties.element.exit(carUUID)
				carProperties.futureElement.enter(carUUID)
			}
		}
	}
	
	synchronized def recursiveAdd(
		maxViewDistance : double, observerIntent : Intent,
		observerPositionData : PhysicsUpdate, result : List<PhysicsUpdate>, distanceToObserver : double,
		previousElement : RoadElement, currentElement : RoadElement
	) : void {
		/* Check if the current element hasn't already been processed */
		if (currentElement != previousElement) {
			if (currentElement instanceof Intersection) {

				/* add all cars in the intersection */
				for (neighbour : currentElement.cars){
					/* if neighbour isn't observer */
					if(neighbour != observerPositionData.source.UUID){
						result.add(physicsUpdates.get(neighbour));
					}
				}
				
				/* If the view distance is greater that the already processed distance */
				if (distanceToObserver + currentElement.length <= maxViewDistance) {
					/* Keep going through next roads */
					for (road : (currentElement as Intersection).getLinks()) {
						recursiveAdd(maxViewDistance, observerIntent, observerPositionData,
							result,	distanceToObserver + currentElement.length, currentElement, road)
					}
				}
			} else {
				// TODO for the first element , length isn't the right metric
				var currentElementAsRoad : Road = (currentElement as Road);
				for (neighbour : currentElement.cars) {
					if (neighbour != observerPositionData.source.UUID) {
						var neighbourPositionData : PhysicsUpdate = physicsUpdates.get(neighbour)
						var neighbourIntent : Intent = intents.get(neighbour)
						
						var distanceNeighbourObserver : double = distanceToObserver;
						/* If the car hasn't changed element last frame */
						if (neighbourPositionData.newElement == neighbourIntent.currentElement){
							/* If both car are going in the same direction (direction of the first is different than the origin of the last) */
							if (neighbourIntent.direction != currentElementAsRoad.nodes.indexOf(previousElement)) {
								distanceNeighbourObserver += neighbourPositionData.newPosition * currentElement.length
							} else {
								distanceNeighbourObserver +=  (1 - neighbourPositionData.newPosition) * currentElement.length
							}
						} else {
							/* If both car are going in the same direction (origin are the same) */
							if (currentElementAsRoad.nodes.indexOf(neighbourIntent.currentElement) ==
								currentElementAsRoad.nodes.indexOf(previousElement)) {
								distanceNeighbourObserver += neighbourPositionData.newPosition * currentElement.length
							} else {
								distanceNeighbourObserver += (1 - neighbourPositionData.newPosition) * currentElement.length
							}
						}
						if (distanceToObserver + distanceNeighbourObserver <= maxViewDistance){
							result.add(physicsUpdates.get(neighbour));
						}
					}
				}
				

				if (distanceToObserver + currentElement.length <= maxViewDistance) {
					/* Keep going through next roads */
					for (intersection : currentElementAsRoad.nodes) {
						recursiveAdd(maxViewDistance, observerIntent, observerPositionData,
							result,	distanceToObserver + currentElement.length, currentElement, intersection)
					}
				}
			}
		}
	}
	
	synchronized def computePerceptions() : void {
		// TODO: migrate PU and INT to CarProperties
		for (pair : this.physicsUpdates.entrySet()) {
			var carUUID : UUID = pair.getKey()
			var physicsUpdate : PhysicsUpdate = pair.getValue()
			var result : List<PhysicsUpdate> = new ArrayList<PhysicsUpdate>()
			recursiveAdd(
				Integer.parseInt(UI.settingsFrame.viewDistance.getText()) / 100.0,
				intents.get(carUUID),
				physicsUpdate,
				result,
				0, 
				null, 
				physicsUpdate.newElement
			)
			emit(new PerceptionUpdate(
				result
			)) [it.UUID == carUUID]
		}
		this.intents.clear()
	}
	
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on RequestNewObjective {
		synchronized (this) {
			emit(
				new NewObjective(this.roads.getNewObjectiveDifferentFrom(occurrence.currentNode))
			) [ it.UUID == occurrence.source.UUID ]
		}
	}
}
