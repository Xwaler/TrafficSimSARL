package fr.utbm.info.ia51.labworks.project.environment

import io.sarl.core.Initialize
import io.sarl.core.AgentSpawned
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import java.util.UUID
import java.util.ArrayList

import fr.utbm.info.ia51.labworks.project.ui.MainFrame
import fr.utbm.info.ia51.labworks.project.car.AutonomousCar
import fr.utbm.info.ia51.labworks.project.car.HumanCar
import io.sarl.core.DefaultContextInteractions
import fr.utbm.info.ia51.labworks.project.road.Graph
import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent

agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var UI : MainFrame
	var mesureFlux : double
	var tauxAccident : double
	var tempsTrajet : double
	var roads : Graph
	var cars = new ArrayList<UUID>;
	
	on Initialize {
		synchronized (this) {
			this.UI = occurrence.parameters.get(0) as MainFrame
			this.roads = new Graph(defaultContext)
			roads.generateRandom()
		}
	}
	
	on StartSimulationEvent {
		info("SIMULATION STARTED")
		this.addCars(
			occurrence.nbCars, 
			occurrence.autonomousProportions, 
			occurrence.obedienceRate,
			occurrence.reactionTime,
			occurrence.perceptionErrorRate,
			occurrence.viewDistance,
			occurrence.FOV
		);
	}
	
	on AgentSpawned {
		synchronized (this) {
			var agentID : UUID = occurrence.agentID
			if (cars.contains(agentID)) {
				this.roads.enter(agentID)
			}
		}
	}
	
	def addCars(
		nbCars : int, 
		autonomousProportions : double, 
		obedienceRate : double,
		reactionTime : double,
		perceptionErrorRate : double,
		viewDistance : double,
		FOV : double
	) : void {
		var nbAutonomous : int = (nbCars * autonomousProportions) as int
		for (i : 0 ..< nbAutonomous) {
			var UUID = UUID::randomUUID()
			spawnInContextWithID(typeof(AutonomousCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV)
			this.cars.add(UUID)
		}
		for (i : 0 ..< nbCars - nbAutonomous) {
			var UUID = UUID::randomUUID()
			spawnInContextWithID(typeof(HumanCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV, obedienceRate)
			this.cars.add(UUID)
		}
	}
}
