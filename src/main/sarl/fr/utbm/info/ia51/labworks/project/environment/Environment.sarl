package fr.utbm.info.ia51.labworks.project.environment

import io.sarl.core.Initialize
import fr.utbm.info.ia51.labworks.project.ui.MainFrame
import fr.utbm.info.ia51.labworks.project.car.AutonomousCar
import fr.utbm.info.ia51.labworks.project.car.StandardCar
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import fr.utbm.info.ia51.labworks.project.road.Graph
import java.util.UUID
import java.util.ArrayList
import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent

agent Environment {
	uses DefaultContextInteractions, Lifecycle
	
	var UI : MainFrame
	var mesureFlux : double
	var tauxAccident : double
	var tempsTrajet : double
	var autonomousProportions : double
	var roads = new Graph
	var cars = new ArrayList<UUID>;
	
	on Initialize {
		var nbCar : int = occurrence.parameters.get(0) as Integer
		synchronized (this) {
			this.UI = occurrence.parameters.get(1) as MainFrame
		}
		//setSkill(new RoadManagerSkill())

		addCars(nbCar);
	}
	
	on StartSimulationEvent {
		System.out.println("START LA SIMULATION")
	}
	
	def addCars(nbCars : int) : void{
		var nbAutonomous : int = (nbCars * autonomousProportions) as int
		for (i : 0 ..< nbAutonomous) {
			var UUID = UUID::randomUUID()
			spawnInContextWithID(typeof(AutonomousCar), UUID, defaultContext)
			cars.add(UUID)
		}
		for (i : 0 ..< nbCars - nbAutonomous) {
			var UUID = UUID::randomUUID()
			spawnInContextWithID(typeof(StandardCar), UUID, defaultContext)
			cars.add(UUID)
		}
	}
	
	def startCars() {
		for (i : 0 ..< cars.size) {
			
		}
	}
}
