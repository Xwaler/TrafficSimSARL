package fr.utbm.info.ia51.labworks.project.environment

import io.sarl.core.Initialize
import io.sarl.core.AgentSpawned
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import java.util.UUID
import java.util.ArrayList

import fr.utbm.info.ia51.labworks.project.ui.MainFrame
import fr.utbm.info.ia51.labworks.project.car.AutonomousCar
import fr.utbm.info.ia51.labworks.project.car.HumanCar
import fr.utbm.info.ia51.labworks.project.road.Graph
import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent
import fr.utbm.info.ia51.labworks.project.events.Intent
import fr.utbm.info.ia51.labworks.project.events.PhysicsUpdate
import fr.utbm.info.ia51.labworks.project.events.PerceptionUpdate
import fr.utbm.info.ia51.labworks.project.events.StopSimulationEvent
import java.util.List
import fr.utbm.info.ia51.labworks.project.road.Road
import fr.utbm.info.ia51.labworks.project.road.Intersection

import java.util.WeakHashMap
import fr.utbm.info.ia51.labworks.project.road.RoadElement

import java.util.Map
import io.sarl.core.AgentTask
import fr.utbm.info.ia51.labworks.project.events.CarProperties
import fr.utbm.info.ia51.labworks.project.events.PerceptCar
import fr.utbm.info.ia51.labworks.project.events.GenerateRoadsEvent
import fr.utbm.info.ia51.labworks.project.events.RequestNewObjective
import fr.utbm.info.ia51.labworks.project.events.NewObjective
import fr.utbm.info.ia51.labworks.project.events.Statistics
import fr.utbm.info.ia51.labworks.project.road.Constants

agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	
	var UI : MainFrame
	var mesureFlux : double
	var tauxAccident : double
	var tempsTrajet : List<Double>
	var roads : Graph
	var frameDelayTask : AgentTask
	var tick : int = 0

	var nbCars : int
	var cars : List<UUID> = new ArrayList<UUID>
	var intents : Map<UUID, Intent> = new WeakHashMap<UUID, Intent>
	var physicsUpdates : Map<UUID, PhysicsUpdate> = new WeakHashMap<UUID, PhysicsUpdate>
	var carsProperties : Map<UUID, CarProperties> = new WeakHashMap<UUID, CarProperties>
	
	on Initialize {
		synchronized (this) {
			this.roads = new Graph(defaultContext)
			this.roads.generateRandom()
			this.UI = occurrence.parameters.get(0) as MainFrame
			this.UI.passGraph(this.roads)
			this.UI.passCarsProperties(this.carsProperties)
			this.UI.contentPane.repaint()
		}
	}
	
	on StartSimulationEvent {
		info("SIMULATION STARTED")
		synchronized (this) {
			this.frameDelayTask = task("frame_delay")
			this.nbCars = occurrence.nbCars
			this.addCars(
				occurrence.autonomousProportions,
				occurrence.obedienceRate,
				occurrence.reactionTime,
				occurrence.perceptionErrorRate,
				occurrence.viewDistance,
				occurrence.FOV
			);
		}
	}

	on StopSimulationEvent {
		synchronized (this) {
			this.cars.clear()
			this.roads.clearCars()
			this.intents.clear()
			this.physicsUpdates.clear()
			this.carsProperties.clear()
			frameDelayTask.cancel()
		}
	}
	
	on GenerateRoadsEvent {
		synchronized (this) {
			this.roads = new Graph(defaultContext)
			this.roads.generateRandom()
			this.UI.passGraph(this.roads)	
		}
	}
	
	on AgentSpawned {
		synchronized (this) {
			var agentID : UUID = occurrence.agentID
			if (this.cars.contains(agentID)) {
				this.roads.enter(agentID)
			}
		}
	}
	
	synchronized def addCars(
		autonomousProportions : double, 
		obedienceRate : double,
		reactionTime : double,
		perceptionErrorRate : double,
		viewDistance : double,
		FOV : double
	) : void {
		var nbAutonomous : int = (nbCars * autonomousProportions) as int
		for (i : 0 ..< nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(AutonomousCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV)
		}
		for (i : 0 ..< nbCars - nbAutonomous) {
			var UUID = UUID::randomUUID()
			this.cars.add(UUID)
			spawnInContextWithID(typeof(HumanCar), UUID, defaultContext, 
				reactionTime, perceptionErrorRate, viewDistance, FOV, obedienceRate)
		}
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on Intent {
		synchronized (this) {
			if (this.cars.contains(occurrence.source.UUID)) {
				this.intents.put(occurrence.source.UUID, occurrence)
				if (this.intents.size() == this.nbCars) {
					this.resolveConflictsAndComputeNewProperties()
					this.UI.passCarsProperties(this.carsProperties)
					this.UI.repaint()
					frameDelayTask.cancel()
					frameDelayTask.in(1000 / 60) [
						this.updateGraph()
						this.computePerceptions()
					]
				}
			}
		}
	}

	synchronized def resolveConflictsAndComputeNewProperties() : void {
		// TODO: actually resolve conflicts
		this.physicsUpdates.clear()
		for (pair : this.intents.entrySet()) {
			var update : PhysicsUpdate = new PhysicsUpdate()
			var carUUID : UUID = pair.getKey()
			var intent : Intent = pair.getValue()
			update.newAcceleration = intent.intendedAcceleration
			update.newSpeed = intent.currentSpeed + update.newAcceleration
			update.newPosition = intent.currentPosition + (update.newSpeed / (this.roads.realSize * intent.currentElement.getLength()))
			update.newLane = Math.max(0, intent.currentLane + (Math.signum(intent.intendedLane - intent.currentLane) / 20))
			update.newElement = intent.currentElement
			if (intent.currentElement instanceof Road) {
				if (update.newPosition >= 1.0) {
					update.newElement = intent.direction == 0 ? 
						(intent.currentElement as Road).getPrimaryNode() : 
						(intent.currentElement as Road).getSecondaryNode()
					update.newPosition = (update.newElement as Intersection).linkThreshold.get(
						(update.newElement as Intersection).links.indexOf(intent.currentElement)
					)
					update.newLane = intent.intendedIntersectionLane
				}
			}
			else if (intent.currentElement instanceof Intersection) {
				var intersectionThreshold : double = (intent.currentElement as Intersection).linkThreshold.get(intent.direction)
				if (intent.currentPosition < intersectionThreshold && update.newPosition >= intersectionThreshold) {
					update.newElement = (intent.currentElement as Intersection).getLinks().get(intent.direction)
					update.newPosition = 0
					update.newLane = intent.intendedLane
				} else {
					if (update.newPosition > 1.0) {
						update.newPosition -= 1.0
						if (update.newPosition >= intersectionThreshold) {
							update.newElement = (intent.currentElement as Intersection).getLinks().get(intent.direction)
							update.newPosition = 0
							update.newLane = intent.intendedLane
						}
					}
				}
			}
			this.physicsUpdates.put(carUUID, update)
		}
		this.carsProperties.clear()
		for (car: this.cars) {
			this.carsProperties.put(car, new CarProperties(
				this.intents.get(car),
				this.physicsUpdates.get(car)
			))
		}
		/* Send physics update to cars */
		for (pair : this.physicsUpdates.entrySet()) {
			emit(pair.getValue())[ it.UUID == pair.getKey() ]
		}
	}
	
	synchronized def updateGraph() : void {
		for (pair : this.carsProperties.entrySet()) {
			var carUUID : UUID = pair.getKey()
			var carProperties : CarProperties = pair.getValue()
			if (carProperties.element !== carProperties.futureElement) {
				carProperties.element.exit(carUUID)
				carProperties.futureElement.enter(carUUID)
			}
		}
		this.tick++
		if (this.tick % 60  == 0) {
			for (intersection : this.roads.intersections) {
				for (link : intersection.links) {
					if (this.tick % 180 == 0 || intersection.getSignalisation(link) == Constants.FEU_ROUGE) {
						intersection.incrementSignalisation(link)
					}
				}
			}
		}
	}
	
	synchronized def recursiveAdd(
		maxViewDistance : int,
		selfProperties : CarProperties,
		selfUUID : UUID,
		result : List<PerceptCar>,
		distanceToObserver : double,
		previousElement : RoadElement, currentElement : RoadElement
	) : void {
		/* Check if the current element hasn't already been processed (making sure that the previous element isn't processed again, 
		 * in case of a loop, this does not work, but loop smaller than the view distance aren't possible
		 */
		if (currentElement != previousElement) {
			/* Element is a intersection */
			if (currentElement instanceof Intersection) {

				/* If the observer see the whole intersection */
				if (distanceToObserver + currentElement.length * this.roads.realSize <= maxViewDistance) {
					/* add all cars in the intersection */
					for (neighbour : currentElement.cars){
						/* don't add self */
						if (neighbour != selfUUID) {
							var neighbourCarProperties : CarProperties = carsProperties.get(neighbour);
							//if the observed car changed element during the past frame, direction hasn't been updated yet
							result.add(
								new PerceptCar(
									distanceToObserver,
									neighbourCarProperties.position,
									currentElement,
									((neighbourCarProperties.element ==	neighbourCarProperties.futureElement) ? 
										neighbourCarProperties.direction : -1),
									neighbourCarProperties.futureSpeed, 
									neighbourCarProperties.lane
								)
							);
						}
					}
				}

				/* Keep going through adjacent element */
				for (road : (currentElement as Intersection).getLinks()) {
					recursiveAdd(
						maxViewDistance, selfProperties, selfUUID, 
						result, distanceToObserver + currentElement.length * this.roads.realSize, 
						currentElement, road
					)
				}
			} else {
				// TODO changed neighbor to observed
				/* Element is a Road */
				var currentElementAsRoad : Road = (currentElement as Road);
				for (neighbour : currentElement.cars) {
					/* ignore self */
					if (neighbour != selfUUID) {
						var neighbourCarProperties : CarProperties = carsProperties.get(neighbour);
						//TODO put this as parameter instead of PU, might need to add an UUID
						var selfCarProperties : CarProperties = carsProperties.get(selfUUID);
						
						/* Compute the distance between the observer and the neighbor */
						var distanceNeighbourObserver : double = distanceToObserver;
						
						/* Compute neighbor direction */
						var neighborDirection : int 
						if (neighbourCarProperties.element == neighbourCarProperties.futureElement) {
							neighborDirection = neighbourCarProperties.direction
						} else {
							/* If the car has changed element during the past frame, direction is unknown, 
							 * since the current element is a road, direction can be deduced
							 */
							neighborDirection = (currentElementAsRoad.nodes.indexOf(neighbourCarProperties.element) == 0 ? 1 : 0)
						}
						
						var selfDirection : int
						if (selfCarProperties.element == selfCarProperties.futureElement) {
							selfDirection = selfCarProperties.direction
						} else {
							/* If the car has changed element during the past frame, direction is unknown, 
							 * since the current element is a road, direction can be deduced
							 */
							selfDirection = (currentElementAsRoad.nodes.indexOf(selfCarProperties.element) ==
								0 ? 1 : 0)
						}
						
						var doesNeighborGoInTheSameDirection : boolean
						if (previousElement === null) {
							/* for the first element processed, the two cars are part of the same road */
							doesNeighborGoInTheSameDirection = (selfDirection == neighborDirection)
						} else {
							/* for the adjacent element, the point from which the observer might enter this element (previousElement) is
							 * used to compute of the neighbor is going in the same direction or not
							 * if neighbor doesn't go toward previous element, it goes in the same direction
							 */
							doesNeighborGoInTheSameDirection = (neighborDirection != currentElementAsRoad.nodes.indexOf(previousElement))

						}
						
						if (doesNeighborGoInTheSameDirection) {
							distanceNeighbourObserver +=
								neighbourCarProperties.futurePosition * currentElement.length * this.roads.realSize
						} else {
							distanceNeighbourObserver +=
								(1 - neighbourCarProperties.futurePosition) * currentElement.length * this.roads.realSize
						}
						
						if (distanceNeighbourObserver <= maxViewDistance){
							result.add(
								new PerceptCar(
									distanceNeighbourObserver,
									neighbourCarProperties.position,
									currentElement, 
									neighborDirection,
									neighbourCarProperties.futureSpeed, neighbourCarProperties.lane
								)
							);
						}
					}
				}
				

				if (distanceToObserver + currentElement.length * this.roads.realSize <= maxViewDistance) {
					/* Keep going through next roads */
					for (intersection : currentElementAsRoad.nodes) {
						recursiveAdd(
							maxViewDistance, selfProperties, selfUUID,
							result, distanceToObserver + currentElement.length * this.roads.realSize,
							currentElement, intersection
						)
					}
				}
			}
		}
	}
	
	synchronized def computePerceptions() : void {
		// TODO: migrate PU and INT to CarProperties
		for (pair : this.carsProperties.entrySet()) {
			var carUUID : UUID = pair.getKey()
			var carProperties : CarProperties = pair.getValue()
			var result : List<PerceptCar> = new ArrayList<PerceptCar>()
			recursiveAdd(
				Integer.parseInt(UI.settingsFrame.viewDistance.getText()),
				carProperties,
				carUUID,
				result,
				0 as double,
				null,
				carProperties.futureElement
			)
			emit(new PerceptionUpdate(
				result
			))[it.UUID == carUUID]
		}
		this.intents.clear()
	}
	
	on Statistics {
		this.tempsTrajet.add(occurrence.travelTime as double / 60)
	}
	
	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on RequestNewObjective {
		synchronized (this) {
			emit(
				new NewObjective(this.roads.getNewObjectiveDifferentFrom(occurrence.currentNode))
			) [ it.UUID == occurrence.source.UUID ]
		}
	}
}
