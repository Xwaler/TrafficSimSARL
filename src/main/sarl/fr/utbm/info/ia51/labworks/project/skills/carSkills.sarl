package fr.utbm.info.ia51.labworks.project.skills

import java.util.List
import fr.utbm.info.ia51.labworks.project.events.PerceptCar
import java.util.ArrayList
import java.util.Random
import fr.utbm.info.ia51.labworks.project.road.Constants

skill PerceptSkillHuman implements PerceptCapacity {
	def percept(surrounding : List<PerceptCar>, viewDistance : double, perceptionErrorRate : double) : List<PerceptCar> {
		var perceptCars : ArrayList<PerceptCar> = new ArrayList();
		var random : Random = new Random();
		for (car : surrounding) {
			if (car.distance < viewDistance * Constants.WORLD_SIZE_SCALLER) {
				if (random.nextDouble >
					((car.distance / (viewDistance * Constants.WORLD_SIZE_SCALLER)) + 1) ** 2 * perceptionErrorRate) {
					perceptCars.add(car)
				}
			}
		}
		perceptCars.sort()
		return perceptCars
	}
}

skill PerceptSkillAutonomous implements PerceptCapacity {
	def percept(surrounding : List<PerceptCar>, viewDistance : double, perceptionErrorRate : double) : List<PerceptCar> {
		var perceptCars : ArrayList<PerceptCar> = new ArrayList();
		var random : Random = new Random();
		for (car : surrounding) {
			if (car.distance < viewDistance * Constants.WORLD_SIZE_SCALLER) {
				if (random.nextDouble >
					((car.distance / (viewDistance * Constants.WORLD_SIZE_SCALLER)) + 1) ** 2 * perceptionErrorRate) {
					perceptCars.add(car)
				}
			}
		}
		perceptCars.sort()
		return perceptCars
	}
}

skill AccelerateSkill implements AccelerateCapacity {
	override accelerateDistance(frontDistance : double, distanceToReach : int) : double {
		return (frontDistance - distanceToReach) / (60)
	}

	override accelerate(speed : int, mySpeed : double) : double {
		return (speed - mySpeed) / (60 * 3.6)
	}

	override decelerateDistance(frontDistance : double, distanceToReach : int) : double {
		return Constants.WORLD_SIZE_SCALLER * (frontDistance - distanceToReach) / (60)
	}
	
	override decelerate(speed : int, mySpeed : double) : double {
		return Constants.WORLD_SIZE_SCALLER * (speed - mySpeed) / (60 * 3.6)
	}
}
