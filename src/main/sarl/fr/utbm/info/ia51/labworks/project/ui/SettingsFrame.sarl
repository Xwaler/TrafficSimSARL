package fr.utbm.info.ia51.labworks.project.ui

import javax.swing.JPanel
import java.awt.FlowLayout
import javax.swing.BoxLayout
import javax.swing.JLabel
import java.awt.Dimension
import java.awt.Font
import javax.swing.JTextField
import javax.swing.JSlider
import javax.swing.JFrame
import javax.swing.JButton
import java.awt.BorderLayout
import javax.swing.border.EmptyBorder
import java.awt.Insets
import java.awt.^event.ActionListener
import java.awt.^event.ActionEvent
import java.awt.^event.KeyListener
import java.awt.^event.KeyEvent

class SettingsFrame extends JFrame implements ActionListener, KeyListener{
	
	var settingsWidth = 700
	var settingsHeight = 500
	var defaultRate = 50
	
	val validateButton : JButton
	val leaveButton : JButton
	val startButton : JButton
	
	public val carNb : JTextField
	public val carRate : JSlider
	public val obedienceRate : JTextField
	
	new(width : int, height : int, startButton : JButton) {
		/* Settings Frame for the popup */

		/* Initiate Settings Frame */
		this.startButton = startButton
		this.contentPane.layout = new BorderLayout
		this.setPreferredSize(new Dimension(this.settingsWidth, this.settingsHeight))
		this.setLocation(((width - this.settingsWidth) / 2), ((height - this.settingsHeight) / 2))
		
		/* Settings Frame Title widget */
		val settingsTitlePane = new JPanel()
		settingsTitlePane.setLayout(new FlowLayout())
		val settingsTitle = new JLabel("Modifier les paramètres")
		settingsTitle.setFont(new Font("", Font.PLAIN, 20))
		settingsTitle.setPreferredSize(new Dimension(300, 100))
		settingsTitle.setHorizontalAlignment(JLabel.CENTER)
		settingsTitlePane.add(settingsTitle)
		settingsTitlePane.setPreferredSize(new Dimension(400, 100))
		
		/* Settings parameters widgets */
		val settingsPane = new JPanel()
		settingsPane.layout = new BoxLayout(settingsPane, BoxLayout::Y_AXIS)
		
		/* Car Number widget */
		val carNbPanel = new JPanel()
		carNbPanel.layout = new FlowLayout()
		val carNbLabel = new JLabel("Nombre de voiture :")
		this.carNb = new JTextField("10")
		this.carNb.setPreferredSize(new Dimension(200, 30))
		carNbPanel.add(carNbLabel)
		carNbPanel.add(carNb)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))
		
		/* Rate of autonomous cars widget */
		val carRatePanel = new JPanel()
		carRatePanel.layout = new FlowLayout()
		val carRateLabel = new JLabel("Taux de voiture autonome :")
		this.carRate = new JSlider(JSlider.HORIZONTAL, 0, 100, this.defaultRate)
		this.carRate.setMajorTickSpacing(20);
		this.carRate.setMinorTickSpacing(20);
		this.carRate.setPaintTicks(true);
		this.carRate.setPaintLabels(true);
		carRatePanel.add(carRateLabel)
		carRatePanel.add(carRate)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))
		
		/* obedience Rate parameter widget */
		val obedienceRatePanel = new JPanel()
		obedienceRatePanel.layout = new FlowLayout()
		val obedienceRateLabel = new JLabel("Taux d'obéissance :")
		this.obedienceRate = new JTextField()
		this.obedienceRate.setPreferredSize(new Dimension(200, 30))
		obedienceRatePanel.add(obedienceRateLabel)
		obedienceRatePanel.add(obedienceRate)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))
		
		/* Bouton panel */
		val btnSettingsPane = new JPanel()
		btnSettingsPane.layout = new FlowLayout()
		this.validateButton = new JButton("Valider et Quitter")
		this.validateButton.addActionListener(this)
		this.validateButton.setMargin(new Insets(10, 10, 10, 10))
		this.leaveButton = new JButton("Quitter")
		this.leaveButton.addActionListener(this)
		this.leaveButton.setMargin(new Insets(10, 10, 10, 10))
		btnSettingsPane.add(this.leaveButton)
		btnSettingsPane.add(this.validateButton)
		btnSettingsPane.setBorder(new EmptyBorder(50, 50, 50, 50))
		
		this.carNb.addKeyListener(this)
		
		/* add widgets and panel to the frame */
		settingsPane.add(carNbPanel)
		settingsPane.add(carRatePanel)
		settingsPane.add(obedienceRatePanel)
		
		this.contentPane.add(BorderLayout::NORTH, settingsTitlePane)
		this.contentPane.add(BorderLayout::CENTER, settingsPane)
		this.contentPane.add(BorderLayout::SOUTH, btnSettingsPane)
		this.pack()
		
		/* ------------------------ */
	}
	
	def actionPerformed(arg0 : ActionEvent) {
		if(arg0.getSource() == this.validateButton){
			this.setVisible(false)
			this.startButton.setEnabled(true)
		}
		if (arg0.getSource() == this.leaveButton) {
			this.setVisible(false)
			this.startButton.setEnabled(true)
		}
	}
	
	def keyPressed(arg0 : KeyEvent) {
		if (arg0.getSource() == this.carNb) {
			var c = arg0.getKeyChar();
			if (!(((c >= '0') && (c <= '9')) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_ENTER))) {
				this.carNb.setEditable(false)
			}else{
				this.carNb.setEditable(true)
			}
		}
	}
	
	def keyReleased(arg0 : KeyEvent) {}
	
	def keyTyped(arg0 : KeyEvent) {}
	
}