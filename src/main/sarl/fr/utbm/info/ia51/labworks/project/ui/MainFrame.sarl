package fr.utbm.info.ia51.labworks.project.ui

import javax.swing.JFrame
import javax.swing.JButton
import javax.swing.JPanel
import java.awt.BorderLayout
import java.awt.Toolkit
import java.awt.Insets
import java.awt.FlowLayout
import java.awt.Dimension
import javax.swing.JLabel
import java.awt.Font
import javax.swing.border.EmptyBorder

import fr.utbm.info.ia51.labworks.project.events.StartSimulationEvent
import fr.utbm.info.ia51.labworks.project.events.StopSimulationEvent
import java.util.UUID
import io.sarl.lang.core.AgentContext
import java.awt.^event.ActionListener
import java.awt.^event.ActionEvent

class MainFrame extends JFrame implements ActionListener {
	
	var screenSize = Toolkit.getDefaultToolkit.getScreenSize()
	var width : int
	var height : int
	
	val startButton : JButton
	val settingsButton : JButton
	
	var simStartedFlag = false
	
	val settingsFrame : SettingsFrame
	val simView : SimView
	val feedBackView = new FeedBackPanel()
	
	var context : AgentContext
	var UIUUID = UUID::randomUUID
	
	new (context : AgentContext) {
		
		if(this.screenSize.getWidth() > 1920){
			this.width = 1920-400
		}
		else{
			this.width = (this.screenSize.getWidth() - 400) as int
		}

		if (this.screenSize.getHeight() > 1080) {
			this.height = 1080 - 200
		} else {
			this.height = (this.screenSize.getHeight() - 200) as int
		}
		
		this.context = context
		
		/* Main UI initiation */
		this.setSize(this.width, this.height)
		this.title="Traffic Simulator"
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
		this.setResizable(false)
		
		/* Btn initiation with action listeners */
		this.startButton = new JButton("Start Simulation")
		this.startButton.addActionListener(this)
		this.startButton.setMargin(new Insets(20,20,20,20))
		
		this.settingsButton = new JButton("Settings")
		this.settingsButton.addActionListener(this)
		this.settingsButton.setMargin(new Insets(20, 20, 20, 20))
		

		/* Widgets of the left panel*/
		
		/* Title of the panel */
		val titlePanel = new JPanel
		titlePanel.setLayout(new FlowLayout())
		val title = new JLabel("Traffic Simulation")
		title.setFont(new Font("", Font.PLAIN, 30))
		title.setPreferredSize(new Dimension(300, 200))
		title.setHorizontalAlignment(JLabel.CENTER)
		titlePanel.add(title)
		titlePanel.setPreferredSize(new Dimension(400, 250))

		/* Btn widget */
		val btnPanel = new JPanel
		btnPanel.setLayout(new FlowLayout())
		btnPanel.add(this.startButton)
		btnPanel.add(this.settingsButton)
		btnPanel.setBorder(new EmptyBorder(50, 50, 50, 50))

		val leftPane = new JPanel
		leftPane.layout = new BorderLayout
		leftPane.setPreferredSize(new Dimension(400, this.height))

		this.settingsFrame = new SettingsFrame(this.width + 400, this.height + 200, this.startButton, context, UIUUID)
		this.simView = new SimView(new Dimension(this.width - 400, this.height - 100))
		
		/* Add widget to the left pane of the main ui */
		leftPane.add(BorderLayout::NORTH,titlePanel)
		leftPane.add(BorderLayout::CENTER,this.feedBackView)
		leftPane.add(BorderLayout::SOUTH, btnPanel)
		
		/* Add everything to the main frame */
		this.contentPane.layout = new BorderLayout
		this.contentPane.add(BorderLayout::CENTER, this.simView)
		this.contentPane.add(BorderLayout::EAST, leftPane)
		this.setLocationRelativeTo(null)
		this.pack()
		this.visible = true
	}
	
	def actionPerformed(arg0 : ActionEvent) {
		if (arg0.getSource() == this.startButton){
			if (simStartedFlag) {
				this.startButton.setText("Start Simulation")
				this.simStartedFlag = false
				this.settingsFrame.lockSettings(false)
				this.context.getDefaultSpace().emit(UIUUID, new StopSimulationEvent())
			} else {
				this.startButton.setText("Stop")
				this.simStartedFlag = true
				this.settingsFrame.lockSettings(true)
				this.context.getDefaultSpace().emit(UIUUID, new StartSimulationEvent(
					Integer.parseInt(this.settingsFrame.carNb.getText()),
					this.settingsFrame.carRate.getValue() / 100.0 as double,
					this.settingsFrame.obedienceRate.getValue() / 100.0 as double,
					this.settingsFrame.reactionTime.getValue() as double,
					this.settingsFrame.perceptionErrorRate.getValue() / 100.0 as double,
					Integer.parseInt(this.settingsFrame.viewDistance.getText()) / 100.0 as double,
					Integer.parseInt(this.settingsFrame.FOV.getText()) / 3.1415 as double
				))
			}
		}
		
		if (arg0.getSource() == this.settingsButton) {
			this.startButton.setEnabled(false)
			this.settingsFrame.setVisible(true)
		}
	}
	
	def sendData(mesureFlux : double, tauxAccident : double, tempsTrajet : double){
		this.feedBackView.updateFields(mesureFlux, tauxAccident, tempsTrajet)
	}
	
}