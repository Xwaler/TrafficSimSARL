package fr.utbm.info.ia51.labworks.project.road

import java.util.UUID
import java.util.List
import java.util.ArrayList
import java.util.Random
import io.sarl.lang.core.AgentContext
import java.util.HashSet
import java.util.Set
import java.util.WeakHashMap
import java.util.Map.Entry

class Graph {
	var minEntryNode : int = 1
	var maxEntryNode : int = 3
	var minOtherNodes : int = 6
	var maxOtherNodes : int = 10
	var minNodeLinks : int = 3
	var maxNodeLinks : int = 5
	
	public var realSize : int = Constants.WORLD_SIZE_SCALLER * 1000

	var context : AgentContext
	var generator : Random = new Random()
	var entryPoints : List<EntryPoint> = new ArrayList<EntryPoint>()
	var intersections : List<Intersection> = new ArrayList<Intersection>()

	new (context : AgentContext) {
		this.context = context
	}

	def enter(car : UUID) {
		var destination : Intersection = this.intersections.get(this.generator.nextInt(this.intersections.size()))
		this.entryPoints.get(this.generator.nextInt(this.entryPoints.size())).enter(car, destination)
	}
	
	def getNewObjectiveDifferentFrom(node : Intersection) {
		var destination : Intersection
		do {
			destination = this.intersections.get(this.generator.nextInt(this.intersections.size()))
		} while (destination == node)
		return destination
	}

	def getEntryPoints() : List<EntryPoint> {
		return this.entryPoints
	}

	def getIntersections() : List<Intersection> {
		return this.intersections
	}
	
	def generateRandom() {
		var index : List<Integer> = new ArrayList<Integer>()
		var edges : List<List<Integer>> = new ArrayList<List<Integer>>()
		/* Initialize entry nodes */
		for (i : 0 ..< this.generator.nextInt(this.maxEntryNode - this.minEntryNode) + this.minEntryNode) {
			index.add(1)
			edges.add(new ArrayList<Integer>())	
		}
		/* Initialize random link number for each intersection */
		for (i : 0 ..< this.generator.nextInt(this.maxOtherNodes - this.minOtherNodes) + this.minOtherNodes) {
			index.add(minNodeLinks)
			edges.add(new ArrayList<Integer>())	
		}
		System.out.println("Initial intersection links number  : " + index.toString())
		
		/* Link each intersection, ensuring that each link is applied to both intersection */
		for (i : 0 ..< index.size()) {
			while (edges.get(i).size() < index.get(i)) {
				var newEdge : int
				do {
					newEdge = this.generator.nextInt(index.size())
				} while (
					newEdge == i || edges.get(i).contains(newEdge) || 
					index.get(newEdge) == 1 || edges.get(newEdge).size() >= this.maxNodeLinks
				)
				edges.get(i).add(newEdge)
			}
			
			for (j : 0 ..< index.size()) {
				if (j != i) {
					if (edges.get(j).contains(i) && !edges.get(i).contains(j)) {
						edges.get(i).add(j)
					}
					if (edges.get(i).contains(j) && !edges.get(j).contains(i)) {
						edges.get(j).add(i)
					}
				}	
			}
		}
		/* Update links number as it can grow if some links needed to force the bound to an intersection */
		for (i : 0 ..< index.size()) {
			index.set(i, edges.get(i).size())	
			edges.get(i).sortInplace()
		}
		/* Debugging */
		System.out.println("Resolved intersection links number : " + index.toString())
		System.out.println("Intersection links : " + edges.toString())
		
		/* Instantiate the roads, again ensuring that the same road object is used both ways */
		var roads : List<List<Road>> = new ArrayList<List<Road>>(index.size())
		for (i : 0 ..< index.size()) {
			roads.add(new ArrayList<Road>())
			
			if (edges.get(i).size() == 1) {
				roads.get(i).add(new OneWayRoad(this.context))
			} else {
				for (e : edges.get(i)) {
					if (e > i) {
						switch (generator.nextInt(2)) {
							case 0: {
								roads.get(i).add(new OneWayRoad(this.context))
							}
							case 1: {
								roads.get(i).add(new TwoWayRoad(this.context))
							}
						}
					} else {
						var existingRoadIndexInOtherIntersection : int = edges.get(e).indexOf(i)
						roads.get(i).add(roads.get(e).get(existingRoadIndexInOtherIntersection))
					}
				}
			}
		}
		/* Instantiate intersections depending on the number of links
		 * Corresponding road links are given to the newly created object
		 * The intersections will tell the roads who they're linked to
		 */
		this.intersections = new ArrayList<Intersection>()
		for (i : 0 ..< index.size()) {
			switch (index.get(i)) {
				case 1: 
					this.entryPoints.add(new EntryPoint(this.context, roads.get(i)))
				case 3: {
					switch (generator.nextInt(2)) {
						case 0: {
							intersections.add(new IntersectionT(this.context, roads.get(i)))
						}
						case 1: {
							intersections.add(new IntersectionY(this.context, roads.get(i)))
						}
					}
				}
				case 4: {
					switch (generator.nextInt(2)) {
						case 0: {
							intersections.add(new CrossIntersection(this.context, roads.get(i)))
						}
						case 1: {
							intersections.add(new Roundabout(this.context, roads.get(i)))
						}
					}
				}
				default:
					intersections.add(new Roundabout(this.context, roads.get(i)))
			}
		}

		for (entryPoint : this.entryPoints) {
			entryPoint.radius = 0.02
			entryPoint.length = 2 * Math.PI * entryPoint.radius
			entryPoint.x = generator.nextDouble * 0.05 + 0.05
			entryPoint.y = generator.nextDouble * 0.90 + 0.05
		}
		for (intersection : this.intersections) {
			intersection.radius = 0.05
			intersection.length = 2 * Math.PI * intersection.radius
			intersection.x = generator.nextDouble * 0.70 + 0.15
			intersection.y = generator.nextDouble * 0.90 + 0.05
		}
		
		/* While the graph is intertwined
		 * generate new intersection positions
		 */
		var iter : int = 0
		var toChange : Intersection = this.isIntertwined(iter)
		while (toChange !== null) {
			if (toChange instanceof EntryPoint) {
				toChange.x = generator.nextDouble * 0.05 + 0.05
				toChange.y = generator.nextDouble * 0.90 + 0.05
			} else {
				toChange.x = generator.nextDouble * 0.70 + 0.15
				toChange.y = generator.nextDouble * 0.90 + 0.05
			}
			iter++
			toChange = this.isIntertwined(iter)
		}

		/* Fix intersections with only one way roads connected to it
		 * Avoid dead ends
		 */
		for (intersection : this.intersections) {
			if (intersection.links.stream().allMatch(
				road | road instanceof OneWayRoad && !road.entryAllowed(intersection)
			)) {
				var replaced : Road = intersection.getLinks().last()
				var by : TwoWayRoad = new TwoWayRoad(this.context)
				by.nodes = replaced.nodes
				for (otherIntersection : this.intersections) {
					otherIntersection.getLinks().replaceAll(road|road == replaced ? by : road)
				}
			}
		}
		
		/* Compute the real lengths of every roads */
		for (intersection: this.intersections) {
			for (road : intersection.getLinks()) {
				if (road.getLength() == -1) {
					road.setLength(
						Math.sqrt(
							Math.pow(road.getPrimaryNode().x - road.getSecondaryNode().x, 2) +
							Math.pow(road.getPrimaryNode().y - road.getSecondaryNode().y, 2)
						) - road.primaryNode.radius - road.secondaryNode.radius
					)
				}
			}
		}
		
		/* Randomize number of lanes for each road
		 * based on it's length and set it's speed limit accordingly
		 */
		for (intersection : this.intersections) {
			intersection.speedLimit = 20
			for (road : intersection.getLinks()) {
				if (road instanceof OneWayRoad) {
					if (road.speedLimit == 0) {
						road.nbOfLane = Math.min(Math.max(
							1, Math.round(road.getLength() * 3) as int + (generator.nextInt(3) - 1)		
						), 3)
						switch (road.nbOfLane) {
							case 1: road.speedLimit = 50
							case 2: road.speedLimit = 70
							case 3: road.speedLimit = 110
						}
					}
				} else if (road instanceof TwoWayRoad) {
					if (road.speedLimit == 0) {
						road.nbOfLanePrimary = Math.min(Math.max(
							1, Math.round(road.getLength() * 3) as int + (generator.nextInt(3) - 1)
						), 3)
						road.nbOfLaneSecondary = Math.min(Math.max(
							1, Math.round(road.getLength() * 3) as int + (generator.nextInt(3) - 1)		
						), 3)
						switch (Math.max(road.nbOfLanePrimary, road.nbOfLaneSecondary)) {
							case 1: road.speedLimit = 50
							case 2: road.speedLimit = 70
							case 3: road.speedLimit = 110
						}
					}
				}
			}
		}
		
		for (entryPoint : this.entryPoints) {
			entryPoint.linkThreshold.add(1.0)
		}
		for (intersection : this.intersections) {
			var anglesMap = new WeakHashMap<Road, Double>()
			for (link : intersection.links) {
				var angle = Math.atan2(
					link.getOtherNode(intersection).y - intersection.y,
					link.getOtherNode(intersection).x - intersection.x
				)
				angle = angle < 0 ? angle + 2 * Math.PI : angle
				anglesMap.put(link, angle)
			}
			var angles = new ArrayList<Entry<Road, Double>>(anglesMap.entrySet())
			angles.sort(Entry.comparingByValue())
			
			intersection.links.clear()
			for (pair : angles) {
				intersection.links.add(pair.getKey())
				intersection.linkThreshold.add(pair.getValue() / (2 * Math.PI))
			}
		}
		
		for (entryPoint : this.entryPoints) {
			entryPoint.nbLanes = 1
		}
		for (intersection : this.intersections) {
			var maxLanes : int
			for (link : intersection.links) {
				var nbLanes : int = (link instanceof OneWayRoad) ? (link as OneWayRoad).nbOfLane : 
					Math.max(
						(link as TwoWayRoad).nbOfLanePrimary,
						(link as TwoWayRoad).nbOfLaneSecondary
					)
				if (nbLanes > maxLanes) {
					maxLanes = nbLanes
				}
			}
			intersection.nbLanes = maxLanes
		}

		for (entryPoint : this.entryPoints) {
			for (link: entryPoint.links) {
				entryPoint.signalisationLinks.put(link, Constants.FEU_VERT)
			}
		}
		var feu : int  = Constants.FEU_ROUGE
		for (intersection : this.intersections) {
			for (link : intersection.links) {
				intersection.signalisationLinks.put(
					link,
					intersection instanceof Roundabout ? Constants.CEDER : feu
				)
				feu = (feu + 1) % (Constants.FEU_VERT + 1)
			}
		}
		
		/* Debugging */
		for (i : 0 ..< this.entryPoints.size()) {
			System.out.println("Entry point " + i + " : " + this.entryPoints.get(i))
		}
		for (i : 0 ..< intersections.size()) {
			System.out.println("Intersection " + (i + this.entryPoints.size()) + " : " + intersections.get(i))
		}
	}
	
	def clearCars() : void {
		for (entryPoint: this.entryPoints) {
			entryPoint.getCars().clear()
		}
		for (intersection: this.intersections) {
			intersection.getCars().clear()
			for (link: intersection.getLinks()) {
				link.getCars().clear()
			}
		}
	}

	def ccw(A : Intersection, B : Intersection, C : Intersection) {
		return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x)	
	}
	
	def segmentsIntersect(A : Intersection, B : Intersection, C : Intersection, D : Intersection) : boolean {
		return ccw(A, C, D) != ccw(B, C, D) && ccw(A, B, C) != ccw(A, B, D)
	}
	
	def circleIntersectWithSegment(A : Intersection, B : Intersection, C : Intersection) : boolean {
		var u : double = (
			(C.x - A.x) * (B.x - A.x) + (C.y - A.y) * (B.y - A.y)
		) / (Math.pow(B.x - A.x, 2) + Math.pow(B.y - A.y, 2))
		var x : double = A.x + u * (B.x - A.x)
		var y : double = A.y + u * (B.y - A.y)
		return Math.pow(C.x - x, 2) + Math.pow(C.y - y, 2) < Math.pow(C.radius, 2)
	}
	
	def isIntertwined(iter : int) : Intersection {
		for (i : 0 ..< this.entryPoints.size()) {
			var e0 = this.entryPoints.get(i)
			for (j : i + 1 ..< this.entryPoints.size()) {
				var e1 = this.entryPoints.get(j)
				if (Math.pow(e0.x - e1.x, 2) + Math.pow(e0.y - e1.y, 2) <=
					Math.pow(0.1 + Math.max(e0.radius, e1.radius) / 2.0, 2)) {
					return generator.nextBoolean ? e0: e1
				}
			}
		}
		var roads : Set<Road> = new HashSet<Road>()
		for (i : 0 ..< this.intersections.size()) {
			var e0 = this.intersections.get(i)
			for (j : i + 1 ..< this.intersections.size()) {
				var e1 = this.intersections.get(j)
				if (Math.pow(e0.x - e1.x, 2) + Math.pow(e0.y - e1.y, 2) <=
					Math.pow(0.1 + Math.max(e0.radius, e1.radius) / 2.0, 2)) {
					return generator.nextBoolean ? e0 : e1
				}
			}
			roads.addAll(e0.links)
		}
		for (road : roads) {
			for (intersection : this.intersections) {
				if(road.primaryNode == intersection || road.secondaryNode == intersection) continue
				if (circleIntersectWithSegment(road.primaryNode, road.secondaryNode, intersection)) {
					return generator.nextBoolean ? road.primaryNode : road.secondaryNode
				}
			}
		}
		var intersecting : Set<Intersection> = new HashSet<Intersection>()
		for (i : 0 ..< roads.size()) {
			var r0 : Road = roads.get(i)
			for (j : i + 1 ..< roads.size()) {
				var r1 : Road = roads.get(j)
				if (r0.primaryNode == r1.primaryNode || r0.primaryNode == r1.secondaryNode ||
					r0.secondaryNode == r1.primaryNode || r0.secondaryNode == r1.secondaryNode
				) continue
				if (segmentsIntersect(r0.primaryNode, r0.secondaryNode, r1.primaryNode, r1.secondaryNode)) {
					intersecting.add(r0.primaryNode)
					intersecting.add(r0.secondaryNode)
					intersecting.add(r1.primaryNode)
					intersecting.add(r1.secondaryNode)
				}
			}
		}
		return intersecting.size() > Math.floor(iter / 10000) ? intersecting.get(generator.nextInt(intersecting.size())) : null
	}
}
