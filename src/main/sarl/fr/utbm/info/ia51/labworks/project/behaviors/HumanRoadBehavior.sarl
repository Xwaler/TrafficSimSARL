package fr.utbm.info.ia51.labworks.project.behaviors

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions

import fr.utbm.info.ia51.labworks.project.events.BehaviorInitialize
import fr.utbm.info.ia51.labworks.project.events.BehaviorStep
import java.util.Random
import fr.utbm.info.ia51.labworks.project.events.Intent
import fr.utbm.info.ia51.labworks.project.skills.AccelerateCapacity
import fr.utbm.info.ia51.labworks.project.road.OneWayRoad
import fr.utbm.info.ia51.labworks.project.events.PerceptCar
import java.util.ArrayList
import fr.utbm.info.ia51.labworks.project.road.TwoWayRoad
import fr.utbm.info.ia51.labworks.project.road.Constants

behavior OneWayRoadHumanBehavior extends RoadBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity
	
	var generator : Random
	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {

	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car | 
				Math.round(car.lane) == Math.round(occurrence.lane) && car.currentElement == occurrence.element && 
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}
		
		if (carInFront !== null) {
			var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)
				
			if ((occurrence.element as OneWayRoad).nbOfLane == 1 || newLane == 0) {
				if (occurrence.speed <= occurrence.element.speedLimit) {
					if (carInFront.distance > (safetyDistance-(occurrence.speed/3.6)*occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if(!makeSomeMess){
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if(!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			}
			else {
				var carsInAdjascentLanes = new ArrayList<PerceptCar>()
				for (car : occurrence.surroundingCars) {
					if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
						((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
						carsInAdjascentLanes.add(car)
					}
				}
				if (occurrence.speed < occurrence.element.speedLimit) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					}
					else if (carsInAdjascentLanes.size() == 0 || carsInAdjascentLanes.get(0).distance > safetyDistance ||
						makeSomeMess) {
						newLane = newLane - 1
						newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
					} 
					else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
				
			}
		} else {
			if (occurrence.speed <= occurrence.element.speedLimit) {
				newAcceleration =  accelerate(occurrence.element.speedLimit, occurrence.speed)
			} else if(!makeSomeMess){
				newAcceleration =  decelerate(occurrence.element.speedLimit, occurrence.speed)
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			0,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior TwoWayRoadHumanBehavior extends RoadBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity

	var generator : Random
	
	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
		
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car |
				Math.round(car.lane) == Math.round(occurrence.lane) && car.currentElement == occurrence.element &&
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (carInFront !== null) {
			var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)

			if ((occurrence.direction == 1 && (occurrence.element as TwoWayRoad).nbOfLaneSecondary == 1) ||
				(occurrence.direction == 0 && (occurrence.element as TwoWayRoad).nbOfLanePrimary == 1) ||
				newLane == 0) {
				if (occurrence.speed <= occurrence.element.speedLimit) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if(!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				var carsInAdjascentLanes = new ArrayList<PerceptCar>()
				for (car : occurrence.surroundingCars) {
					if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
						((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
						carsInAdjascentLanes.add(car)
					}
				}
				if (occurrence.speed < occurrence.element.speedLimit) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (carsInAdjascentLanes.size() == 0 || carsInAdjascentLanes.get(0).distance > safetyDistance ||
						makeSomeMess) {
						newLane = newLane - 1
						newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}

			}
		} else {
			if (occurrence.speed <= occurrence.element.speedLimit) {
				newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
			} else if (!makeSomeMess) {
				newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			0,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}
