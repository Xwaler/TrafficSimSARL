
package fr.utbm.info.ia51.labworks.project.behaviors

import io.sarl.core.Logging
import io.sarl.core.Initialize

import fr.utbm.info.ia51.labworks.project.events.BehaviorInitialize
import fr.utbm.info.ia51.labworks.project.skills.AccelerateCapacity
import io.sarl.core.DefaultContextInteractions
import java.util.Random
import fr.utbm.info.ia51.labworks.project.events.PerceptCar
import fr.utbm.info.ia51.labworks.project.events.BehaviorStep
import fr.utbm.info.ia51.labworks.project.events.Intent
import fr.utbm.info.ia51.labworks.project.road.Road
import fr.utbm.info.ia51.labworks.project.road.Intersection
import fr.utbm.info.ia51.labworks.project.road.Constants
import fr.utbm.info.ia51.labworks.project.road.OneWayRoad
import fr.utbm.info.ia51.labworks.project.road.TwoWayRoad
import java.util.ArrayList

behavior EntryPointHumanBehavior extends IntersectionBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity

	var generator : Random


	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
		
	}

	on BehaviorStep {
		emit(new Intent(
			occurrence.speed < 20 && new Random().nextBoolean ? 1 : 0,
			occurrence.lane,
			0,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior CrossIntersectionHumanBehavior extends IntersectionBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity

	var generator : Random


	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
	}

	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var intersectionLane = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)
	
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (occurrence.element instanceof Road) {
			var incomingNode : Intersection = occurrence.element.getIncomingNode(occurrence.direction)
			var nbOfLane = (occurrence.element instanceof OneWayRoad)
					? (occurrence.element as OneWayRoad).nbOfLane : occurrence.direction == 1
					? (occurrence.element as TwoWayRoad).nbOfLaneSecondary
					: (occurrence.element as TwoWayRoad).nbOfLanePrimary
			var nbOfIntersetionLane = incomingNode.getNbOfLane()
			var carInIntersection = new ArrayList<PerceptCar>()
			var carsInAdjascentLanes = new ArrayList<PerceptCar>()
			for (car : occurrence.surroundingCars) {
				if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
					((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
					carsInAdjascentLanes.add(car)
				}
			}
	
			if (carInFront !== null) {
				if (carInFront.distance < (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
					newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
				}
			} else {
				newAcceleration = decelerate((occurrence.element.speedLimit * (1 - occurrence.position)) as int,
					occurrence.speed)
				if (nbOfIntersetionLane == 3) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 2)) {
							newLane = newLane + 1
						}
						intersectionLane = 2
					} else if (incomingNode.exitIsOnCenter(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 1)) {
							if (occurrence.lane > 1) {
								newLane = newLane - 1
							} else {
								newLane = newLane + 1
							}
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else if (nbOfIntersetionLane == 2) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 1)) {
							newLane = newLane + 1
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else {
					intersectionLane = 0
				}
	
				if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ROUGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.STOP) {
		
					newAcceleration = decelerate(0, occurrence.speed)
		
				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ORANGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.CEDER) {
					if (!makeSomeMess) {
		
						for (car : occurrence.surroundingCars) {
							if (car.currentElement == incomingNode) {
								carInIntersection.add(car)
							}
						}
		
						if (carInIntersection.stream().allMatch(car|car.distance > Constants.WORLD_SIZE_SCALLER * 12)) {
							newAcceleration = accelerate(20, occurrence.speed)
						} else {
							newAcceleration = decelerate(0, occurrence.speed)
						}
					}
				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_VERT) {
					if (occurrence.speed > 20) {
						newAcceleration = decelerate(20, occurrence.speed)
					} else {
						newAcceleration = accelerate(20, occurrence.speed)
					}
				}
			}
		} else if (occurrence.element instanceof Intersection) {
			if (carInFront !== null) {
				if (occurrence.speed <= 20) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				if (occurrence.speed <= 20) {
					newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
				} else if (!makeSomeMess) {
					newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
				}
			}
		}
	
		emit(new Intent(
			newAcceleration,
			newLane,
			intersectionLane,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior IntersectionTHumanBehavior extends IntersectionBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity
	
	var generator : Random

	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
	}

	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var intersectionLane = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)
	
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (occurrence.element instanceof Road) {
			var incomingNode : Intersection = occurrence.element.getIncomingNode(occurrence.direction)
			var nbOfLane = (occurrence.element instanceof OneWayRoad)
					? (occurrence.element as OneWayRoad).nbOfLane : occurrence.direction == 1
					? (occurrence.element as TwoWayRoad).nbOfLaneSecondary
					: (occurrence.element as TwoWayRoad).nbOfLanePrimary
			var nbOfIntersetionLane = incomingNode.getNbOfLane()
			var carInIntersection = new ArrayList<PerceptCar>()
			var carsInAdjascentLanes = new ArrayList<PerceptCar>()
			for (car : occurrence.surroundingCars) {
				if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
					((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
					carsInAdjascentLanes.add(car)
				}
			}
	
			if (carInFront !== null) {
				if (carInFront.distance < (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
					newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
				}
			} else {
	
				newAcceleration = decelerate((occurrence.element.speedLimit * (1 - occurrence.position)) as int,
					occurrence.speed)
				if (nbOfIntersetionLane == 3) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 2)) {
							newLane = newLane + 1
						}
						intersectionLane = 2
					} else if (incomingNode.exitIsOnCenter(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 1)) {
							if (occurrence.lane > 1) {
								newLane = newLane - 1
							} else {
								newLane = newLane + 1
							}
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else if (nbOfIntersetionLane == 2) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != Math.min(nbOfLane, 1)) {
							newLane = newLane + 1
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
								(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
								newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else {
					intersectionLane = 0
				}
	
				if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ROUGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.STOP) {
		
					newAcceleration = decelerate(0, occurrence.speed)
		
				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ORANGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.CEDER) {
					if (!makeSomeMess) {
		
						for (car : occurrence.surroundingCars) {
							if (car.currentElement == incomingNode) {
								carInIntersection.add(car)
							}
						}
		
						if (carInIntersection.stream().allMatch(car|car.distance > Constants.WORLD_SIZE_SCALLER * 12)) {
							newAcceleration = accelerate(20, occurrence.speed)
						} else {
							newAcceleration = decelerate(0, occurrence.speed)
						}
					}
		
				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_VERT) {
					if (occurrence.speed > 20) {
						newAcceleration = decelerate(20, occurrence.speed)
					} else {
						newAcceleration = accelerate(20, occurrence.speed)
					}
				}
			}
		} else if (occurrence.element instanceof Intersection) {
			if (carInFront !== null) {
				if (occurrence.speed <= 20) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				if (occurrence.speed <= 20) {
					newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
				} else if (!makeSomeMess) {
					newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
				}
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			intersectionLane,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior IntersectionYHumanBehavior extends IntersectionBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity
	
	var generator : Random

	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
	}

	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var intersectionLane = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)

		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (occurrence.element instanceof Road) {
			var incomingNode : Intersection = occurrence.element.getIncomingNode(occurrence.direction)
			var nbOfLane = (occurrence.element instanceof OneWayRoad)
					? (occurrence.element as OneWayRoad).nbOfLane : occurrence.direction == 1 ? (occurrence.
					element as TwoWayRoad).nbOfLaneSecondary : (occurrence.element as TwoWayRoad).nbOfLanePrimary
			var nbOfIntersetionLane = incomingNode.getNbOfLane()
			var carInIntersection = new ArrayList<PerceptCar>()
			var carsInAdjascentLanes = new ArrayList<PerceptCar>()
			for (car : occurrence.surroundingCars) {
				if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
					((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
					carsInAdjascentLanes.add(car)
				}
			}

			if (carInFront !== null) {
				if (carInFront.distance < (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
					newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
				}
			} else {
	
				newAcceleration = decelerate((occurrence.element.speedLimit * (1 - occurrence.position)) as int,
					occurrence.speed)
				if (nbOfIntersetionLane == 3) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 2)) {
							newLane = newLane + 1
						}
						intersectionLane = 2
					} else if (incomingNode.exitIsOnCenter(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 1)) {
							if (occurrence.lane > 1) {
								newLane = newLane - 1
							} else {
								newLane = newLane + 1
							}
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) && newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else if (nbOfIntersetionLane == 2) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 1)) {
							newLane = newLane + 1
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) && newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else {
					intersectionLane = 0
				}

				if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ROUGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.STOP) {

					newAcceleration = decelerate(0, occurrence.speed)
					
				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_ORANGE ||
					incomingNode.getSignalisation(occurrence.element as Road) == Constants.CEDER) {
					if (!makeSomeMess) {			

						for (car : occurrence.surroundingCars) {
							if (car.currentElement == incomingNode) {
								carInIntersection.add(car)
							}
						}

						if (carInIntersection.stream().allMatch(car|car.distance > Constants.WORLD_SIZE_SCALLER * 12)) {
							newAcceleration = accelerate(20, occurrence.speed)
						} else {
							newAcceleration = decelerate(0, occurrence.speed)
						}
					}

				} else if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.FEU_VERT) {
					if (occurrence.speed > 20) {
						newAcceleration = decelerate(20, occurrence.speed)
					} else {
						newAcceleration = accelerate(20, occurrence.speed)
					}
				}
			}
		} else if (occurrence.element instanceof Intersection) {
			if (carInFront !== null) {
				if (occurrence.speed <= 20) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				if (occurrence.speed <= 20) {
					newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
				} else if (!makeSomeMess) {
					newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
				}
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			intersectionLane,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior RoundaboutHumanBehavior extends IntersectionBehavior {
	uses Logging, DefaultContextInteractions, AccelerateCapacity

	var generator : Random

	on Initialize {
		this.generator = new Random()
	}

	on BehaviorInitialize {
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BehaviorStep {
		var newAcceleration : double = 0
		var makeSomeMess : boolean = (this.generator.nextDouble > occurrence.obedienceRate)
		var newLane : double = Math.round(occurrence.lane)
		var intersectionLane = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)

		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
				car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
				car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (occurrence.element instanceof Road) {
			var incomingNode : Intersection = occurrence.element.getIncomingNode(occurrence.direction)
			var nbOfLane = (occurrence.element instanceof OneWayRoad)
					? (occurrence.element as OneWayRoad).nbOfLane : occurrence.direction == 1
					? (occurrence.element as TwoWayRoad).nbOfLaneSecondary
					: (occurrence.element as TwoWayRoad).nbOfLanePrimary
			var nbOfIntersetionLane = incomingNode.getNbOfLane()
			var carInIntersection = new ArrayList<PerceptCar>()
			var carsInAdjascentLanes = new ArrayList<PerceptCar>()
			for (car : occurrence.surroundingCars) {
				if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
					((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
					carsInAdjascentLanes.add(car)
				}
			}
			if (carInFront !== null) {
				if (carInFront.distance < (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
					newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
				}
			} else {

				newAcceleration = decelerate((occurrence.element.speedLimit * (1 - occurrence.position)) as int,
					occurrence.speed)
				if (nbOfIntersetionLane == 3) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 2)) {
							newLane = newLane + 1
						}
						intersectionLane = 2
					} else if (incomingNode.exitIsOnCenter(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 1)) {
							if (occurrence.lane > 1) {
								newLane = newLane - 1
							} else {
								newLane = newLane + 1
							}
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) && newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else if (nbOfIntersetionLane == 2) {
					if (incomingNode.exitIsOnTheRight(incomingNode.links.indexOf(occurrence.element),
						occurrence.nextIntersectionDirection)) {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) &&
							newLane != Math.min(nbOfLane, 1)) {
							newLane = newLane + 1
						}
						intersectionLane = 1
					} else {
						if ((carsInAdjascentLanes.size() == 0 ||
							carsInAdjascentLanes.get(0).distance >
							(safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) && newLane != 0) {
							newLane = newLane - 1
						}
						intersectionLane = 0
					}
				} else {
					intersectionLane = 0
				}
				
				if (incomingNode.getSignalisation(occurrence.element as Road) == Constants.CEDER ||
					incomingNode.getSignalisation(occurrence.element as Road) != Constants.FEU_ROUGE
				) {
					if (!makeSomeMess) {
							
						for (car : occurrence.surroundingCars) {
							if (car.currentElement == incomingNode) {
								carInIntersection.add(car)
							}
						}
							
						if (carInIntersection.stream().allMatch(car|car.distance > Constants.WORLD_SIZE_SCALLER * 12)) {
							newAcceleration = accelerate(20, occurrence.speed)
						} else {
							newAcceleration = decelerate(0,occurrence.speed)
						}
					}
				}
			}
		} else if (occurrence.element instanceof Intersection) {
			if (carInFront !== null) {
				if (occurrence.speed <= 20) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (!makeSomeMess) {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else if (!makeSomeMess) {
					if (carInFront.distance > (safetyDistance - (occurrence.speed / 3.6) * occurrence.reactionTime)) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				if (occurrence.speed <= 20) {
					newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
				} else if (!makeSomeMess) {
					newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
				}
			}	
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			intersectionLane,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}
