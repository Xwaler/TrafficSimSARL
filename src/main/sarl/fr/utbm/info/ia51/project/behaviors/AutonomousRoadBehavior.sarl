
package fr.utbm.info.ia51.project.behaviors

import io.sarl.core.Logging
import io.sarl.core.Initialize
import fr.utbm.info.ia51.project.events.BehaviorInitialize
import fr.utbm.info.ia51.project.skills.AccelerateCapacity
import fr.utbm.info.ia51.project.events.BehaviorStep
import fr.utbm.info.ia51.project.events.Intent
import io.sarl.core.DefaultContextInteractions
import fr.utbm.info.ia51.project.events.PerceptCar
import fr.utbm.info.ia51.project.road.Constants
import java.util.ArrayList
import fr.utbm.info.ia51.project.road.TwoWayRoad
import fr.utbm.info.ia51.project.road.OneWayRoad

behavior OneWayRoadAutonomousBehavior extends RoadBehavior {
	uses Logging, AccelerateCapacity, DefaultContextInteractions

	on Initialize {
		// Event trigger before the behavior begin to live or to be used.
		// You should put all the initialization statements in this block of code.
	}

	on BehaviorInitialize {
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BehaviorStep {
		var newAcceleration : double = 0
		var newLane : double = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
			car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
					car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (carInFront !== null) {
			var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)

			if ((occurrence.element as OneWayRoad).nbOfLane == 1 || newLane == 0) {
				if (occurrence.speed <= occurrence.element.speedLimit) {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				var carsInAdjascentLanes = new ArrayList<PerceptCar>()
				for (car : occurrence.surroundingCars) {
					if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
						((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
						carsInAdjascentLanes.add(car)
					}
				}
				if (occurrence.speed < occurrence.element.speedLimit) {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (carsInAdjascentLanes.size() == 0 ||
						carsInAdjascentLanes.get(0).distance > safetyDistance) {
						newLane = newLane - 1
						newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else{
					if (carInFront.distance > safetyDistance) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}

			}
		} else {
			if (occurrence.speed <= occurrence.element.speedLimit) {
				newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
			} else{
				newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			0,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}

behavior TwoWayRoadAutonomousBehavior extends RoadBehavior {
	uses Logging, AccelerateCapacity, DefaultContextInteractions

	on Initialize {
		// Event trigger before the behavior begin to live or to be used.
		// You should put all the initialization statements in this block of code.
	}

	on BehaviorInitialize {
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on BehaviorStep {
		var newAcceleration : double = 0
		var newLane : double = Math.round(occurrence.lane)
		var carInFront : PerceptCar = null
		if (occurrence.surroundingCars.size() > 0) {
			carInFront = occurrence.surroundingCars.findFirst(
			car |
				Math.abs(car.lane - occurrence.lane) < 0.5 && car.currentElement == occurrence.element &&
					car.direction == occurrence.direction && car.position > occurrence.position
			)
		}

		if (carInFront !== null) {
			var safetyDistance : int = Constants.WORLD_SIZE_SCALLER * 6 * ((occurrence.speed / 10) as int)

			if ((occurrence.direction == 1 && (occurrence.element as TwoWayRoad).nbOfLaneSecondary == 1) ||
				(occurrence.direction == 0 && (occurrence.element as TwoWayRoad).nbOfLanePrimary == 1) ||
				newLane == 0) {
				if (occurrence.speed <= occurrence.element.speedLimit) {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}
			} else {
				var carsInAdjascentLanes = new ArrayList<PerceptCar>()
				for (car : occurrence.surroundingCars) {
					if (car.currentElement == occurrence.element && car.direction == occurrence.direction &&
						((car.lane - occurrence.lane) < 1.5) && ((car.lane - occurrence.lane) >= 0.5)) {
						carsInAdjascentLanes.add(car)
					}
				}
				if (occurrence.speed < occurrence.element.speedLimit) {
					if (carInFront.distance > safetyDistance) {
						newAcceleration = accelerateDistance(carInFront.distance, safetyDistance)
					} else if (carsInAdjascentLanes.size() == 0 ||
						carsInAdjascentLanes.get(0).distance > safetyDistance) {
						newLane = newLane - 1
						newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
					} else{
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				} else{
					if (carInFront.distance > safetyDistance) {
						newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
					} else {
						newAcceleration = decelerateDistance(carInFront.distance, safetyDistance)
					}
				}

			}
		} else {
			if (occurrence.speed <= occurrence.element.speedLimit) {
				newAcceleration = accelerate(occurrence.element.speedLimit, occurrence.speed)
			} else {
				newAcceleration = decelerate(occurrence.element.speedLimit, occurrence.speed)
			}
		}

		emit(new Intent(
			newAcceleration,
			newLane,
			0,
			occurrence.position,
			occurrence.speed,
			occurrence.lane,
			occurrence.element,
			occurrence.direction
		))
	}
}
