package fr.utbm.info.ia51.project.ui

import javax.swing.JPanel
import java.awt.FlowLayout
import javax.swing.BoxLayout
import javax.swing.JLabel
import java.awt.Dimension
import java.awt.Font
import javax.swing.JTextField
import javax.swing.JSlider
import javax.swing.JFrame
import javax.swing.JButton
import java.awt.BorderLayout
import javax.swing.border.EmptyBorder
import java.awt.Insets
import java.awt.^event.ActionListener
import java.awt.^event.ActionEvent
import java.awt.^event.KeyListener
import java.awt.^event.KeyEvent
import io.sarl.lang.core.AgentContext
import java.util.UUID
import fr.utbm.info.ia51.project.events.HumanCarPropertiesUpdate
import fr.utbm.info.ia51.project.events.AutonomousCarPropertiesUpdate
import java.util.Hashtable
import java.awt.^event.WindowListener
import java.awt.^event.WindowEvent

class SettingsFrame extends JFrame implements ActionListener, KeyListener, WindowListener{
	
	var settingsWidth = 700
	var settingsHeight = 800
	var defaultCarNb = 10
	var defaultAutonomousProportion = 50
	var defaultObedienceRate = 90
	var defaultReaction = 10
	var defaultPerception = 10
	var defaultViewDistance = 30
	
	var simRunning = false
	
	val validateButton : JButton
	val leaveButton : JButton
	val startButton : JButton
	
	public val carNb : JTextField
	public val carRate : JSlider
	public val obedienceRate : JSlider
	public val reactionTime : JSlider
	public val perceptionErrorRate : JSlider
	public val viewDistance : JTextField

	var context : AgentContext
	var UIUUID : UUID
	
	new(width : int, height : int, startButton : JButton, context : AgentContext,  UIUUID : UUID) {
		/* Context for events */
		this.context = context
		this.UIUUID = UIUUID
		
		/* Settings Frame for the popup */

		/* Initiate Settings Frame */
		this.startButton = startButton
		this.contentPane.layout = new BorderLayout
		this.setPreferredSize(new Dimension(this.settingsWidth, this.settingsHeight))
		this.setLocation(((width - this.settingsWidth) / 2), ((height - this.settingsHeight) / 2))
		
		/* Settings Frame Title widget */
		val settingsTitlePane = new JPanel()
		settingsTitlePane.setLayout(new FlowLayout())
		val settingsTitle = new JLabel("Modifier les paramètres")
		settingsTitle.setFont(new Font("", Font.PLAIN, 20))
		settingsTitle.setPreferredSize(new Dimension(300, 100))
		settingsTitle.setHorizontalAlignment(JLabel.CENTER)
		settingsTitlePane.add(settingsTitle)
		settingsTitlePane.setPreferredSize(new Dimension(400, 100))
		
		/* Settings parameters widgets */
		val settingsPane = new JPanel()
		settingsPane.layout = new BoxLayout(settingsPane, BoxLayout::Y_AXIS)
		
		/* Car Number widget */
		val carNbPanel = new JPanel()
		carNbPanel.layout = new FlowLayout()
		val carNbLabel = new JLabel("Nombre de voitures :")
		this.carNb = new JTextField("" + defaultCarNb)
		this.carNb.setPreferredSize(new Dimension(200, 30))
		carNbPanel.add(carNbLabel)
		carNbPanel.add(carNb)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))
		
		/* Rate of autonomous cars widget */
		val carRatePanel = new JPanel()
		carRatePanel.layout = new FlowLayout()
		val carRateLabel = new JLabel("Taux de voiture autonome :")
		this.carRate = new JSlider(JSlider.HORIZONTAL, 0, 100, this.defaultAutonomousProportion)
		this.carRate.setMajorTickSpacing(20);
		this.carRate.setMinorTickSpacing(20);
		this.carRate.setPaintTicks(true);
		this.carRate.setPaintLabels(true);
		carRatePanel.add(carRateLabel)
		carRatePanel.add(carRate)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))
		
		/* obedience Rate parameter widget */
		val obedienceRatePanel = new JPanel()
		obedienceRatePanel.layout = new FlowLayout()
		val obedienceRateLabel = new JLabel("Taux d'obéissance :")
		this.obedienceRate = new JSlider(JSlider.HORIZONTAL, 0, 100, this.defaultObedienceRate)
		this.obedienceRate.setMajorTickSpacing(20);
		this.obedienceRate.setMinorTickSpacing(20);
		this.obedienceRate.setPaintTicks(true);
		this.obedienceRate.setPaintLabels(true);
		obedienceRatePanel.add(obedienceRateLabel)
		obedienceRatePanel.add(obedienceRate)
		carNbPanel.setBorder(new EmptyBorder(20, 20, 20, 20))

		/* Reaction time widget
		 */
		val reactionTimePanel = new JPanel()
		reactionTimePanel.layout = new FlowLayout()
		val reactionTimeLabel = new JLabel("Temps de réaction :")
		this.reactionTime = new JSlider(JSlider.HORIZONTAL, 5, 20, this.defaultReaction)
		this.reactionTime.setMajorTickSpacing(2);
		this.reactionTime.setMinorTickSpacing(2);
		var dict = new Hashtable();
		for (var i = 0; i < 20; i += 2) {
			dict.put(i, new JLabel(Double.toString(i / 10.0 as double)));
		}
		this.reactionTime.setLabelTable(dict)
		this.reactionTime.setPaintTicks(true);
		this.reactionTime.setPaintLabels(true);
		reactionTimePanel.add(reactionTimeLabel)
		reactionTimePanel.add(reactionTime)

		/* Perception error rate widget
		 */
		val perceptionErrorRatePanel = new JPanel()
		perceptionErrorRatePanel.layout = new FlowLayout()
		val perceptionErrorRateLabel = new JLabel("Taux d'erreur :")
		this.perceptionErrorRate = new JSlider(JSlider.HORIZONTAL, 0, 30, this.defaultPerception)
		this.perceptionErrorRate.setMajorTickSpacing(5);
		this.perceptionErrorRate.setMinorTickSpacing(5);
		this.perceptionErrorRate.setPaintTicks(true);
		this.perceptionErrorRate.setPaintLabels(true);
		perceptionErrorRatePanel.add(perceptionErrorRateLabel)
		perceptionErrorRatePanel.add(perceptionErrorRate)

		val viewDistancePanel = new JPanel()
		viewDistancePanel.layout = new FlowLayout()
		val viewDistanceLabel = new JLabel("Portée de vue max (m) :")
		this.viewDistance = new JTextField(""+defaultViewDistance)
		this.viewDistance.setPreferredSize(new Dimension(200, 30))
		viewDistancePanel.add(viewDistanceLabel)
		viewDistancePanel.add(viewDistance)
		
		/* Bouton panel */
		val btnSettingsPane = new JPanel()
		btnSettingsPane.layout = new FlowLayout()
		this.validateButton = new JButton("Valider et Quitter")
		this.validateButton.addActionListener(this)
		this.validateButton.setMargin(new Insets(10, 10, 10, 10))
		this.leaveButton = new JButton("Quitter")
		this.leaveButton.addActionListener(this)
		this.leaveButton.setMargin(new Insets(10, 10, 10, 10))
		btnSettingsPane.add(this.leaveButton)
		btnSettingsPane.add(this.validateButton)
		btnSettingsPane.setBorder(new EmptyBorder(50, 50, 50, 50))
		
		this.carNb.addKeyListener(this)
		this.viewDistance.addKeyListener(this)
		this.addWindowListener(this)
		
		/* add widgets and panel to the frame */
		settingsPane.add(carNbPanel)
		settingsPane.add(carRatePanel)
		settingsPane.add(obedienceRatePanel)
		settingsPane.add(reactionTimePanel)
		settingsPane.add(perceptionErrorRatePanel)
		settingsPane.add(viewDistancePanel)
		
		this.contentPane.add(BorderLayout::NORTH, settingsTitlePane)
		this.contentPane.add(BorderLayout::CENTER, settingsPane)
		this.contentPane.add(BorderLayout::SOUTH, btnSettingsPane)
		this.pack()
		
		/* ------------------------ */
	}
	
	def actionPerformed(arg0 : ActionEvent) {
		if(arg0.getSource() == this.validateButton){
			this.setVisible(false)
			this.startButton.setEnabled(true)
			this.defaultCarNb = Integer.parseInt(this.carNb.getText())
			this.defaultAutonomousProportion = this.carRate.getValue()
			this.defaultObedienceRate = this.obedienceRate.getValue()
			this.defaultReaction = this.reactionTime.getValue()
			this.defaultPerception = this.perceptionErrorRate.getValue()
			this.defaultViewDistance = Integer.parseInt(this.viewDistance.getText())
			
			this.context.getDefaultSpace().emit(UIUUID, new HumanCarPropertiesUpdate(
				this.obedienceRate.getValue() / 100.0 as double,
				this.reactionTime.getValue() as double,
				this.perceptionErrorRate.getValue() / 100.0 as double,
				Integer.parseInt(this.viewDistance.getText()) / 100.0 as double
			))
			this.context.getDefaultSpace().emit(UIUUID, new AutonomousCarPropertiesUpdate(
				this.reactionTime.getValue() as double,
				this.perceptionErrorRate.getValue() / 100.0 as double,
				Integer.parseInt(this.viewDistance.getText()) / 100.0 as double
			))
		}
		if (arg0.getSource() == this.leaveButton) {
			this.setVisible(false)
			this.validateButton.setEnabled(true)
			if (!this.simRunning) {
				this.carNb.setEditable(true)
			}			
			this.viewDistance.setEditable(true)
			this.startButton.setEnabled(true)
			this.carNb.setText("" + defaultCarNb)
			this.carRate.setValue(defaultAutonomousProportion)
			this.obedienceRate.setValue(defaultObedienceRate)
			this.reactionTime.setValue(defaultReaction)
			this.perceptionErrorRate.setValue(defaultPerception)
			this.viewDistance.setText(""+defaultViewDistance)
		}
	}
	
	def keyPressed(arg0 : KeyEvent) {
		if (arg0.getSource() == this.carNb) {
			var c = arg0.getKeyChar();
			if (!(((c >= '0') && (c <= '9')) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_BACK_SPACE) || 
				(c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_SHIFT))) {
				this.carNb.setEditable(false)
				this.validateButton.setEnabled(false)
			}else{
				this.carNb.setEditable(true)
				this.validateButton.setEnabled(true)
			}
		}
		if (arg0.getSource() == this.viewDistance) {
			var c = arg0.getKeyChar();
			if (!(((c >= '0') && (c <= '9')) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_BACK_SPACE) ||
				(c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_SHIFT))) {
				this.viewDistance.setEditable(false)
				this.validateButton.setEnabled(false)
			} else {
				this.viewDistance.setEditable(true)
				this.validateButton.setEnabled(true)
			}
		}
	}
	
	def keyReleased(arg0 : KeyEvent) {}
	
	def keyTyped(arg0 : KeyEvent) {}

	def lockSettings(bool : boolean) {
		this.simRunning = true
		this.carNb.setEditable(!bool)
		this.carRate.setEnabled(!bool)
	}
	
	def windowActivated(arg0 : WindowEvent) {}
	
	def windowClosed(arg0 : WindowEvent) {}
	
	def windowClosing(arg0 : WindowEvent) {
		this.startButton.setEnabled(true)
	}
	
	def windowDeactivated(arg0 : WindowEvent) {}
	
	def windowDeiconified(arg0 : WindowEvent) {}
	
	def windowIconified(arg0 : WindowEvent) {}
	
	def windowOpened(arg0 : WindowEvent) {}
	
}