package fr.utbm.info.ia51.project.events

import java.util.List
import io.sarl.lang.core.Event
import fr.utbm.info.ia51.project.road.RoadElement
import fr.utbm.info.ia51.project.road.Intersection

event Update extends Event {
	
}

event PerceptionUpdate extends Update {
	var surroundingCars : List<PerceptCar>

	new (surroundingCars : List<PerceptCar>) {
		this.surroundingCars = surroundingCars
	}
}

event PhysicsUpdate extends Update {
	var newPosition : double
	var newSpeed : double
	var newAcceleration : double
	var newLane : double
	var newElement : RoadElement
	var colliding : boolean

	new {}

	new (
		newPosition : double,
		newSpeed : double,
		newAcceleration : double,
		newLane : double,
		newElement : RoadElement,
		accidented : boolean
	) {
		this.newPosition = newPosition
		this.newSpeed = newSpeed
		this.newAcceleration = newAcceleration
		this.newLane = newLane
		this.newElement = newElement
		this.colliding = accidented
	}
}

event RequestNewObjective extends Event {
	var currentNode : Intersection
	
	new (currentNode : Intersection) {
		this.currentNode = currentNode
	}
}

event NewObjective extends Event {
	var newObjective : Intersection
	
	new (newObjective : Intersection) {
		this.newObjective = newObjective
	}
}

class PerceptCar implements Comparable<PerceptCar> {
	public var distance : double
	public var position : double
	public var currentElement : RoadElement
	public var direction : int
	public var speed : double
	public var lane : double
	
	new (distance : double, position : double, currentElement : RoadElement, direction : int, speed : double, lane : double){
		this.distance = distance
		this.position = position
		this.currentElement = currentElement
		this.direction = direction
		this.speed = speed
		this.lane =  lane
	}
	
	def compareTo(arg0 : PerceptCar) : int {
		var difference : double = this.distance - arg0.distance
		if(difference > 0){
			return 1;
		} else if(difference < 0){
			return -1;
		} else {
			return 0;
		}
	}
	
}

class CarProperties {
	public var position : double
	public var futurePosition : double
	public var speed : double
	public var futureSpeed : double
	public var direction : int
	public var lane : double
	public var element : RoadElement
	public var futureElement : RoadElement
	public var isHuman : boolean
	public var colliding : boolean
	
	new (intent : Intent, physicsUpdate: PhysicsUpdate, isHuman : boolean) {
		this.position = intent.currentPosition
		this.futurePosition = physicsUpdate.newPosition
		this.speed = intent.currentSpeed
		this.futureSpeed = physicsUpdate.newSpeed
		this.direction = intent.direction
		this.lane = intent.currentLane
		this.element = intent.currentElement
		this.futureElement = physicsUpdate.newElement
		this.isHuman = isHuman
		this.colliding = physicsUpdate.colliding
	}
}
