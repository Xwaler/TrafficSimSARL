package fr.utbm.info.ia51.project.car

import io.sarl.core.Initialize
import io.sarl.core.Destroy
import io.sarl.core.Logging

import fr.utbm.info.ia51.project.events.HumanCarPropertiesUpdate
import fr.utbm.info.ia51.project.events.EnterOneWayRoad
import fr.utbm.info.ia51.project.events.EnterEntryPoint
import fr.utbm.info.ia51.project.behaviors.OneWayRoadHumanBehavior
import fr.utbm.info.ia51.project.behaviors.EntryPointHumanBehavior
import fr.utbm.info.ia51.project.events.EnterTwoWayRoad
import fr.utbm.info.ia51.project.behaviors.TwoWayRoadHumanBehavior
import fr.utbm.info.ia51.project.events.EnterCrossIntersection
import fr.utbm.info.ia51.project.behaviors.CrossIntersectionHumanBehavior
import fr.utbm.info.ia51.project.events.EnterIntersectionY
import fr.utbm.info.ia51.project.behaviors.IntersectionYHumanBehavior
import fr.utbm.info.ia51.project.events.EnterIntersectionT
import fr.utbm.info.ia51.project.behaviors.IntersectionTHumanBehavior
import fr.utbm.info.ia51.project.events.EnterRoundabout
import fr.utbm.info.ia51.project.behaviors.RoundaboutHumanBehavior
import fr.utbm.info.ia51.project.skills.PerceptSkillHuman
import fr.utbm.info.ia51.project.skills.PerceptCapacity
import fr.utbm.info.ia51.project.events.PhysicsUpdate
import fr.utbm.info.ia51.project.road.Road
import fr.utbm.info.ia51.project.behaviors.RoadBehavior
import fr.utbm.info.ia51.project.road.Intersection
import fr.utbm.info.ia51.project.road.Roundabout
import fr.utbm.info.ia51.project.road.CrossIntersection
import fr.utbm.info.ia51.project.road.IntersectionT
import fr.utbm.info.ia51.project.road.IntersectionY
import io.sarl.core.Behaviors
import fr.utbm.info.ia51.project.behaviors.RoadAccidentBehavior

agent HumanCar extends Car {
	uses Logging, Behaviors

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		synchronized (this) {
			this.obedienceRate = occurrence.parameters.get(3) as Double
		}
		setSkill(new PerceptSkillHuman, PerceptCapacity)
		info("New human car spawned.")
	}

	on HumanCarPropertiesUpdate {
		this.obedienceRate = occurrence.obedienceRate
		info("Properties updated")
	}

	on PhysicsUpdate {
		synchronized (this) {
			if (!occurrence.colliding && this.currentElement instanceof Road && this.positionInRoad > 0.70 && 
				(this.carBehavior instanceof RoadBehavior && !(this.carBehavior instanceof RoadAccidentBehavior))
			) {
				var intersectionComing : Intersection = (this.currentElement as Road).getIncomingNode(this.direction)
				switch (intersectionComing.class) {
					case Roundabout: {
						this.registerNewBehavior(new RoundaboutHumanBehavior(this))
					}
					case CrossIntersection: {
						this.registerNewBehavior(new CrossIntersectionHumanBehavior(this))
					}
					case IntersectionT: {
						this.registerNewBehavior(new IntersectionTHumanBehavior(this))
					}
					case IntersectionY: {
						this.registerNewBehavior(new IntersectionYHumanBehavior(this))
					}
				}
			}	
		}
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterOneWayRoad {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new OneWayRoadHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterTwoWayRoad {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new TwoWayRoadHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterEntryPoint {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new EntryPointHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterCrossIntersection {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new CrossIntersectionHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterIntersectionY {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new IntersectionYHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterIntersectionT {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new IntersectionTHumanBehavior(this))
	}

	@SuppressWarnings("discouraged_occurrence_readonly_use")
	on EnterRoundabout {
		info("Entered " + occurrence.road)
		this.registerNewBehavior(new RoundaboutHumanBehavior(this))
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Human car destroyed.")
	}
}
